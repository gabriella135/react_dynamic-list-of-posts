{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","api/posts.ts","App.tsx","index.tsx"],"names":["PostsList","filteredPosts","setIsSelected","isSelected","selectPost","selectedPost","changeValue","value","didMount","useRef","useEffect","current","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","handleAddComment","setIsButtonNotVisible","useState","name","setName","email","setEmail","commentText","setCommentText","hasNameError","setHasNameError","hasEmailError","setHasEmailError","hasCommentTextError","setHasCommentTextError","isCommentLoading","setIsCommentLoading","onSubmit","event","preventDefault","trim","length","htmlFor","placeholder","onChange","e","target","PostDetails","filteredComments","isError","handleRemoveComment","isButtonNotVisible","body","comment","href","UserSelector","users","selectedUser","selectUser","isVisible","setIsVisible","state","role","user","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","getUsers","getPosts","getComments","App","isLoading","setIsLoading","setUsers","posts","setPosts","comments","setComments","setSelectedUser","setSelectedPost","setIsError","a","usersList","postsList","commentsList","fetchUsers","fetchPosts","fetchComments","useMemo","filter","userId","postId","newComment","selectedCommentId","stateItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d731fe0d.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  filteredPosts: Post[] | [],\n  setIsSelected: React.Dispatch<React.SetStateAction<boolean>>\n  isSelected: boolean,\n  selectPost: (post: Post) => void,\n  selectedPost: Post | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  filteredPosts,\n  setIsSelected,\n  isSelected,\n  selectPost,\n  selectedPost,\n}) => {\n  const changeValue = () => {\n    setIsSelected(value => !value);\n  };\n\n  const didMount = useRef(false);\n\n  useEffect(() => {\n    if (didMount.current) {\n      setIsSelected(true);\n    } else {\n      didMount.current = true;\n    }\n  }, [selectedPost]);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {filteredPosts.map(post => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {(selectedPost === post)\n                  ? (\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className={classNames(\n                        'button is-link',\n                        { 'is-light': !isSelected },\n                      )}\n                      onClick={() => {\n                        selectPost(post);\n                        changeValue();\n                      }}\n                    >\n                      {isSelected && (selectedPost === post)\n                        ? 'Close'\n                        : 'Open'}\n                    </button>\n                  )\n                  : (\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className={classNames(\n                        'button is-link',\n                        'is-light',\n                      )}\n                      onClick={() => {\n                        selectPost(post);\n                        changeValue();\n                      }}\n                    >\n                      {isSelected && (selectedPost === post)\n                        ? 'Close'\n                        : 'Open'}\n                    </button>\n                  )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  handleAddComment: (\n    name: string,\n    email: string,\n    body: string,\n  ) => void,\n  selectedPost: Post | null,\n  setIsButtonNotVisible: (isVisible: boolean) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleAddComment,\n  selectedPost,\n  setIsButtonNotVisible,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [hasNameError, setHasNameError] = useState(false);\n  const [hasEmailError, setHasEmailError] = useState(false);\n  const [hasCommentTextError, setHasCommentTextError] = useState(false);\n  const [isCommentLoading, setIsCommentLoading] = useState(false);\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!name.trim().length) {\n      setHasNameError(true);\n    }\n\n    if (!email.trim().length) {\n      setHasEmailError(true);\n    }\n\n    if (!commentText.length) {\n      setHasCommentTextError(true);\n    }\n\n    if (name.trim().length && email.trim().length && commentText) {\n      handleAddComment(name, email, commentText);\n      setIsCommentLoading(false);\n      setCommentText('');\n    }\n  };\n\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setHasNameError(false);\n\n    setName(e.target.value);\n  };\n\n  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setHasEmailError(false);\n\n    setEmail(e.target.value);\n  };\n\n  const handleCommentTextChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setHasCommentTextError(false);\n\n    setCommentText(e.target.value);\n  };\n\n  const didMount = useRef(false);\n\n  useEffect(() => {\n    if (didMount.current) {\n      setIsButtonNotVisible(false);\n      setName('');\n      setEmail('');\n    }\n\n    didMount.current = true;\n  }, [selectedPost]);\n\n  const handleClearButton = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    setName('');\n    setEmail('');\n    setCommentText('');\n    setHasCommentTextError(false);\n    setHasNameError(false);\n    setHasEmailError(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleFormSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': hasNameError },\n            )}\n            value={name}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': hasEmailError },\n            )}\n            value={email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': hasCommentTextError },\n            )}\n            value={commentText}\n            onChange={handleCommentTextChange}\n          />\n        </div>\n\n        {hasCommentTextError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isCommentLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearButton}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPost: Post | null,\n  filteredComments: Comment[],\n  isCommentLoading: boolean,\n  isError: boolean,\n  handleAddComment: (\n    name: string,\n    email: string,\n    body: string,\n  ) => void,\n  handleRemoveComment: (commentId: number) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  filteredComments,\n  isCommentLoading,\n  isError,\n  handleAddComment,\n  handleRemoveComment,\n}) => {\n  const [isButtonNotVisible, setIsButtonNotVisible] = useState(false);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {`${selectedPost?.body}`}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentLoading && <Loader />}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isCommentLoading && (\n            (!filteredComments.length)\n              ? (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              ) : (\n                <p className=\"title is-4\">Comments:</p>\n              )\n          )}\n\n          {!isCommentLoading && (\n            filteredComments.map(comment => (\n              <article\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n                key={comment.id}\n              >\n                <div className=\"message-header\">\n                  <a\n                    href={`mailto:${comment.email}`}\n                    data-cy=\"CommentAuthor\"\n                  >\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => handleRemoveComment(comment.id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            ))\n          )}\n\n          {(!isCommentLoading) && (\n            (isButtonNotVisible)\n              ? (\n                <NewCommentForm\n                  handleAddComment={handleAddComment}\n                  selectedPost={selectedPost}\n                  setIsButtonNotVisible={setIsButtonNotVisible}\n                />\n              ) : (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setIsButtonNotVisible(true)}\n                >\n                  Write a comment\n                </button>\n              )\n          )}\n\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  selectUser: (user: User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  selectUser,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsVisible(state => !state)}\n        >\n          <span>\n            {selectedUser ? selectedUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isVisible && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': selectedUser === user },\n                )}\n                onClick={() => {\n                  selectUser(user);\n                  setIsVisible(state => !state);\n                }}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Comment, NewComment } from '../types/Comment';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: Comment | NewComment | null = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: NewComment) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: Comment) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment, NewComment } from '../types/Comment';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = () => {\n  return client.get<Post[]>('/posts');\n};\n\nexport const getComments = () => {\n  return client.get<Comment[]>('/comments');\n};\n\nexport const addComment = (data: NewComment) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, {\n  useEffect, useMemo, useRef, useState,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport {\n  addComment, deleteComment, getComments, getPosts, getUsers,\n} from './api/posts';\nimport { Comment } from './types/Comment';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isCommentLoading, setIsCommentLoading] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [isSelected, setIsSelected] = useState(false);\n\n  async function fetchUsers() {\n    const usersList = await getUsers();\n\n    setUsers(usersList);\n  }\n\n  async function fetchPosts() {\n    setIsLoading(true);\n    try {\n      const postsList = await getPosts();\n\n      setPosts(postsList);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  async function fetchComments() {\n    setIsCommentLoading(true);\n    try {\n      const commentsList = await getComments();\n\n      setComments(commentsList);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsCommentLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  const selectUser = (user: User) => {\n    setSelectedUser(user);\n  };\n\n  const selectPost = (post: Post) => {\n    setSelectedPost(post);\n  };\n\n  useEffect(() => {\n    fetchPosts();\n  }, [selectedUser]);\n\n  useEffect(() => {\n    fetchComments();\n  }, [selectedPost]);\n\n  const filteredPosts = useMemo(() => {\n    return posts\n      .filter(post => selectedUser?.id === post.userId);\n  }, [posts]);\n\n  const filteredComments = useMemo(() => {\n    return comments\n      .filter(comment => selectedPost?.id === comment.postId);\n  }, [comments]);\n\n  const handleAddComment = async (\n    name: string,\n    email: string,\n    body: string,\n  ) => {\n    let newComment;\n\n    if (selectedPost) {\n      newComment = await addComment({\n        name,\n        email,\n        body,\n        postId: selectedPost.id,\n      });\n\n      setComments([...filteredComments, newComment]);\n    }\n  };\n\n  const handleRemoveComment = async (selectedCommentId: number) => {\n    await deleteComment(selectedCommentId);\n    setComments(\n      state => state.filter(stateItem => stateItem.id !== selectedCommentId),\n    );\n  };\n\n  const didMount = useRef(false);\n\n  useEffect(() => {\n    if (didMount.current) {\n      setIsSelected(false);\n    } else {\n      didMount.current = true;\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  selectUser={selectUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n\n                )}\n                {isLoading && <Loader />}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {(selectedUser && !filteredPosts.length && !isLoading) && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {(selectedUser && filteredPosts.length > 0 && !isLoading) && (\n                  <PostsList\n                    filteredPosts={filteredPosts}\n                    selectedPost={selectedPost}\n                    setIsSelected={setIsSelected}\n                    isSelected={isSelected}\n                    selectPost={selectPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': isSelected },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                selectedPost={selectedPost}\n                filteredComments={filteredComments}\n                isCommentLoading={isCommentLoading}\n                isError={isError}\n                handleAddComment={handleAddComment}\n                handleRemoveComment={handleRemoveComment}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}